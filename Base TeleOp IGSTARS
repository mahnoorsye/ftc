 package org.firstinspires.ftc.teamcode;
 
 //full teleop code with imu, pid, apriltag, arcade drive
 //also idk what im doing so pls dont come after me this could be completely wrong :)
 
//import com.qualcomm.robotcore.eventloop.opmode.Autonomous;
import com.qualcomm.robotcore.eventloop.opmode.LinearOpMode;
import com.qualcomm.robotcore.hardware.DcMotor;
import com.qualcomm.hardware.rev.RevHubOrientationOnRobot;
import com.qualcomm.robotcore.eventloop.opmode.TeleOp;
import com.qualcomm.robotcore.hardware.IMU;
import org.firstinspires.ftc.robotcore.external.navigation.AngleUnit;
import org.firstinspires.ftc.robotcore.external.navigation.AngularVelocity;
import org.firstinspires.ftc.robotcore.external.navigation.Orientation;
import org.firstinspires.ftc.robotcore.external.navigation.YawPitchRollAngles;
import com.qualcomm.robotcore.hardware.DcMotor;
import com.qualcomm.robotcore.hardware.DcMotorSimple;
import com.qualcomm.robotcore.util.ElapsedTime;
import static com.qualcomm.hardware.rev.RevHubOrientationOnRobot.xyzOrientation;
import org.firstinspires.ftc.vision.VisionPortal;
import org.firstinspires.ftc.robotcore.external.hardware.camera.BuiltinCameraDirection;
import org.firstinspires.ftc.robotcore.external.hardware.camera.WebcamName;
import com.qualcomm.robotcore.util.Range;
import com.qualcomm.hardware.bosch.BNO055IMU;
import java.util.List;
 
 @TeleOp
 
 public class MariamNov10th extends LinearOpMode {

//Declaration

    DcMotor frontright = null;
    DcMotor frontleft = null;
    DcMotor backright = null;
    DcMotor backleft = null;
     
    IMU imu;
    double Kp = 0.5;
    double Ki = 0.5;
    double Kd = 0.5;
    double IntegralSum = 0; 
    double PreviousError = 0;
    private ElapsedTime runtime = new ElapsedTime();
    private AprilTagProcessor aprilTag;
    private VisionPortal  visionPortal;
    private BNO055IMU imu;
    
    public void init(){  

//initialization

         imu = hardwareMap.get(IMU.class, "imu");
         frontright = hardwareMap.get(DcMotor.class, "frontright");
         frontleft = hardwareMap.get(DcMotor.class, "frontleft");
         backright = hardwareMap.get(DcMotor.class, "backright");
         backleft = hardwareMap.get(DcMotor.class, "backleft");

//Directions

         frontright.setDirection(DcMotor.Direction.REVERSE);
         frontleft.setDirection(DcMotor.Direction.FORWARD);
         backright.setDirection(DcMotor.Direction.REVERSE);
         backleft.setDirection(DcMotor.Direction.FORWARD);
         
         double xRotation = 0;
         double yRotation = 0;
         double zRotation = 0;
         double target = 100;
         double currentPosition = 0;
    }
    
     @Override
     public void runOpMode(){
        
        Orientation hubRotation = xyzOrientation(xRotation, yRotation, zRotation);
        RevHubOrientationOnRobot orientationOnRobot = new RevHubOrientationOnRobot(hubRotation);

//WHATS OUR DIRECTION???? IDK SO WHO DO WE ASK???

        RevHubOrientationOnRobot.LogoFacingDirection logoDirection = RevHubOrientationOnRobot.LogoFacingDirection.UP;
        RevHubOrientationOnRobot.UsbFacingDirection  usbDirection  = RevHubOrientationOnRobot.UsbFacingDirection.FORWARD;
        imu.initialize(new IMU.Parameters(orientationOnRobot));
        //does this go here???

         init();
         runtime.reset();
         
         telemetry.addData("Status", "Initialized");
         telemetry.update();
         waitForStart();
         
         ElapsedTime  myTimer = new ElapsedTime();
         
         while (opModeIsActive()){
	    
				    float fwdBackPower = -gamepad1.left_stick_y;
				    float strafePower= gamepad1.left_stick_x;
				    float turnPower = gamepad1.right_stick_x;
				       
				    float leftFrontPower = fwdBackPower -  turnPower;
				    float rightFrontPower = fwdBackPower + turnPower;
				    float leftMidPower = strafePower;
				    float rightMidPower =  strafePower;
    
            motorLeft.setPower(power);
            motorRight.setPower(power);
            frontLeft.setPower(power);
            frontRight.setPower(power);
        }

        while (!isStopRequested()) {
            telemetry.addData("Hub orientation", "X=%.1f,  Y=%.1f,  Z=%.1f \n", xRotation, yRotation, zRotation);

            if (gamepad1.y) {
                telemetry.addData("Yaw", "Resetting\n");
                imu.resetYaw();
            } else {
                telemetry.addData("Yaw", "Press Y (triangle) on Gamepad to reset\n");
            }

            YawPitchRollAngles orientation = imu.getRobotYawPitchRollAngles();
            AngularVelocity angularVelocity = imu.getRobotAngularVelocity(AngleUnit.DEGREES);

            telemetry.addData("Yaw (Z)", "%.2f Deg. (Heading)", orientation.getYaw(AngleUnit.DEGREES));
            telemetry.addData("Pitch (X)", "%.2f Deg.", orientation.getPitch(AngleUnit.DEGREES));
            telemetry.addData("Roll (Y)", "%.2f Deg.\n", orientation.getRoll(AngleUnit.DEGREES));
            telemetry.addData("Yaw (Z) velocity", "%.2f Deg/Sec", angularVelocity.zRotationRate);
            telemetry.addData("Pitch (X) velocity", "%.2f Deg/Sec", angularVelocity.xRotationRate);
            telemetry.addData("Roll (Y) velocity", "%.2f Deg/Sec", angularVelocity.yRotationRate);
            telemetry.update();
        }
             
     }
     }
   
    }
     }
     
 }
