package org.firstinspires.ftc.teamcode;

/*
import com.qualcomm.hardware.rev.RevHubOrientationOnRobot;
import com.qualcomm.robotcore.util.ElapsedTime;
import com.qualcomm.robotcore.hardware.DcMotor;
import com.qualcomm.robotcore.eventloop.opmode.Autonomous;
import com.qualcomm.robotcore.eventloop.opmode.Disabled;
import com.qualcomm.robotcore.eventloop.opmode.LinearOpMode;
import com.qualcomm.robotcore.eventloop.opmode.TeleOp;
import com.qualcomm.robotcore.hardware.IMU;
import org.firstinspires.ftc.robotcore.external.navigation.AngleUnit;
import org.firstinspires.ftc.robotcore.external.navigation.AngularVelocity;
import org.firstinspires.ftc.robotcore.external.navigation.Orientation;
import org.firstinspires.ftc.robotcore.external.navigation.YawPitchRollAngles;
import static com.qualcomm.hardware.rev.RevHubOrientationOnRobot.xyzOrientation;
*/

package org.firstinspires.ftc.robotcontroller.external.samples;

import com.qualcomm.hardware.rev.RevHubOrientationOnRobot;
import com.qualcomm.robotcore.eventloop.opmode.Disabled;
import com.qualcomm.robotcore.eventloop.opmode.LinearOpMode;
import com.qualcomm.robotcore.eventloop.opmode.TeleOp;
import com.qualcomm.robotcore.hardware.IMU;
import org.firstinspires.ftc.robotcore.external.navigation.AngleUnit;
import org.firstinspires.ftc.robotcore.external.navigation.AngularVelocity;
import org.firstinspires.ftc.robotcore.external.navigation.YawPitchRollAngles;

@Autonomous(name = "Sensor: IMU Non-Orthogonal", group = "Sensor")

public class MahnoorIMU extends LinearOpMode
{
    // The IMU sensor object
    IMU imu;
    double Kp = 0.5;
    double Ki = 0.5;
    double Kd = 0.5;
    double IntegralSum = 0;
    double TotalTime = 15;
    double PreviousError = 0;
    
    private DcMotor motorLeft;
    private DcMotor motorRight;
    private DcMotor frontRight;
    private DcMotor frontLeft;


    @Override public void runOpMode() throws InterruptedException {

        imu = hardwareMap.get(IMU.class, "imu");
        motorLeft  = hardwareMap.get(DcMotor.class, "motorLeft");
        motorRight = hardwareMap.get(DcMotor.class, "motorRight");
        frontRight = hardwareMap.get(DcMotor.class, "frontRight");
        frontLeft = hardwareMap.get(DcMotor.class, "frontLeft");

        double xRotation = 0;  // enter the desired X rotation angle here.
        double yRotation = 0;  // enter the desired Y rotation angle here.
        double zRotation = 0;  // enter the desired Z rotation angle here.
        double target = 100;
        double currentPosition = 0;
        //DOESTHISGO HERE? waitForStart();
        
        //DOESTHISGO HERE? ElapsedTime  myTimer = new ElapsedTime();
        
        while (opModeIsActive()) {
      double power = PIDController(target, currentPosition);

        motorLeft.setPower(power);
        motorRight.setPower(power);
        frontLeft.setPower(power);
        frontRight.setPower(power);
        }
//DOESTHISGOHERE??????------------------------------------------------
        public double angleWrap(double radians) {
        while (radians > Math.PI) {
            radians -= 2 * Math.PI;
            } 
        while (radians < -Math.PI) {
            radians += 2 * Math.PI;
            }
        return radians;
        }
        //you can also use degrees instead of radians but ill just use radians cuz idk this code

        Orientation hubRotation = xyzOrientation(xRotation, yRotation, zRotation);

        RevHubOrientationOnRobot orientationOnRobot = new RevHubOrientationOnRobot(hubRotation);
        imu.initialize(new IMU.Parameters(orientationOnRobot));

        while (!isStopRequested()) {
            telemetry.addData("Hub orientation", "X=%.1f,  Y=%.1f,  Z=%.1f \n", xRotation, yRotation, zRotation);

            if (gamepad1.y) {
                telemetry.addData("Yaw", "Resetting\n");
                imu.resetYaw();
            } else {
                telemetry.addData("Yaw", "Press Y (triangle) on Gamepad to reset\n");
            }

            YawPitchRollAngles orientation = imu.getRobotYawPitchRollAngles();
            AngularVelocity angularVelocity = imu.getRobotAngularVelocity(AngleUnit.DEGREES);

            telemetry.addData("Yaw (Z)", "%.2f Deg. (Heading)", orientation.getYaw(AngleUnit.DEGREES));
            telemetry.addData("Pitch (X)", "%.2f Deg.", orientation.getPitch(AngleUnit.DEGREES));
            telemetry.addData("Roll (Y)", "%.2f Deg.\n", orientation.getRoll(AngleUnit.DEGREES));
            telemetry.addData("Yaw (Z) velocity", "%.2f Deg/Sec", angularVelocity.zRotationRate);
            telemetry.addData("Pitch (X) velocity", "%.2f Deg/Sec", angularVelocity.xRotationRate);
            telemetry.addData("Roll (Y) velocity", "%.2f Deg/Sec", angularVelocity.yRotationRate);
            telemetry.update();
        }
    }
        public double PIDController(double target, double Current ){

            
            //PROPORTION
            double ProportionError = target - Current;
            ProportionError *= Kp;
            //Kp is proportion constant
            //multiplying Kp by the error and storing that into errror as its new value

            //INTEGRAL
            IntegralSum = ProportionError * myTimer.time(); //area of one single rectangle
            //prop error is the height of the rectangle
            // interval time is the base of rectangle
            // integral sum is a history of all the errors

            //DERIVATIVE
            double Derivative = (PreviousError - Current) / myTimer.time();
            PreviousError = CurrentError;
            myTimer.reset();

            //ERROR
            double error = (ProportionError * Kp) + (IntegralSum * Ki) + (Derivative * Kd);
            return error; 
   
    }

}
