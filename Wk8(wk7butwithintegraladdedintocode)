//javascript:void(0)package org.firstinspires.ftc.teamcode;

import com.qualcomm.robotcore.eventloop.opmode.LinearOpMode;
import com.qualcomm.robotcore.eventloop.opmode.TeleOp;
import com.qualcomm.robotcore.eventloop.opmode.Disabled;
import com.qualcomm.robotcore.hardware.DcMotor;
import com.qualcomm.robotcore.hardware.DcMotorSimple;
import com.qualcomm.robotcore.util.ElapsedTime;



@TeleOp

public class MahnoorMariamwk7 extends LinearOpMode {
    double Kp = 0.5;
    double Ki = 0.5;
    double Kd = 0.5;
    double IntegralSum = 0;
    double TotalTime = 15;
    double PreviousError = 0;
    
    //Integral time is actually Interval time

private DcMotor motorLeft;
private DcMotor motorRight;
private DcMotor frontRight;
private DcMotor frontLeft;


    @Override
    public void runOpMode() {
        
    motorLeft  = hardwareMap.get(DcMotor.class, "motorLeft");
    motorRight = hardwareMap.get(DcMotor.class, "motorRight");
    frontRight = hardwareMap.get(DcMotor.class, "frontRight");
    frontLeft = hardwareMap.get(DcMotor.class, "frontLeft");


        double target = 100;
        double currentPosition = 0;
        waitForStart();

        ElapsedTime  myTimer = new ElapsedTime();

        while (opModeIsActive()) {
      double power = PIDController(target, currentPosition);

        motorLeft.setPower(power);
        motorRight.setPower(power);
        frontLeft.setPower(power);
        frontRight.setPower(power);
     

        }
    }
      
    public double PIDController(double target, double Current ){

            
            //PROPORTION
            double ProportionError = target - Current;
            ProportionError *= Kp;
            //Kp is proportion constant
            //multiplying Kp by the error and storing that into errror as its new value

            //INTEGRAL
            IntegralSum = ProportionError * myTimer.time(); //area of one single rectangle
            //prop error is the height of the rectangle
            // interval time is the base of rectangle
            // integral sum is a history of all the errors

            //DERIVATIVE
            double Derivative = (PreviousError - Current) / myTimer.time();
            PreviousError = CurrentError;
            myTimer.reset();

            //ERROR
            double error = (ProportionError * Kp) + (IntegralSum * Ki) + (Derivative * Kd);
            return error; 
   
    }


}
